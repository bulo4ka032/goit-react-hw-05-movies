{"version":3,"file":"static/js/387.6226a2d0.chunk.js","mappings":"qNAEaA,EAAWC,EAAAA,EAAAA,IAAH,yCAIRC,EAAeD,EAAAA,EAAAA,EAAH,iEAKZE,EAAiBF,EAAAA,EAAAA,IAAH,+C,SCA3B,EATc,SAAC,GAAsB,IAApBG,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,IACxB,OACE,UAACF,EAAD,YACE,SAACH,EAAD,CAAUM,IAAKD,EAAKE,IAAI,WACxB,SAACL,EAAD,UAAeE,MAGpB,C,2ICPYI,EAAcP,EAAAA,EAAAA,GAAH,2FAMXQ,EAAaR,EAAAA,EAAAA,GAAH,sBAEVS,EAAST,EAAAA,EAAAA,GAAH,sCAINU,EAAUV,EAAAA,EAAAA,EAAH,sB,6BCsBpB,EA7BgB,WACd,OAA8BW,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAQR,OANAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBH,GAASI,KAAKL,EACnC,GAAE,CAACC,IAEJK,QAAQC,IAAIR,GAERA,EAAQS,OAAS,GAEjB,UAACd,EAAD,WACG,IACAK,EAAQU,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GAC/B,OACE,UAACjB,EAAD,YACE,SAACC,EAAD,UAASc,KACT,SAACb,EAAD,UAAUc,MAFKC,EAKpB,QAIE,SAACC,EAAA,QAAD,CAAOvB,QAAQ,sCAAsCC,IAAKuB,GAEpE,C,mMChCDC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAe,IAAIC,gBACrB,CACIC,QAAS,mCACTC,SAAU,UAILC,EAAiB,mCAAG,sGACNL,EAAAA,EAAAA,IAAA,+BAAkCC,IAD5B,uBACrBK,EADqB,EACrBA,KADqB,kBAEtBA,EAAKC,SAFiB,2CAAH,qDAKjBC,EAAe,mCAAG,WAAMC,GAAN,yFACJT,EAAAA,EAAAA,IAAA,wBAA2BC,EAA3B,kBAAiDQ,IAD7C,uBACnBH,EADmB,EACnBA,KADmB,kBAEpBA,EAAKC,SAFe,2CAAH,sDAKfG,EAAY,mCAAG,WAAMb,GAAN,yFACDG,EAAAA,EAAAA,IAAA,iBAAoBH,EAApB,YAA0BI,IADzB,uBAChBK,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAKZK,EAAmB,mCAAG,WAAMd,GAAN,yFACRG,EAAAA,EAAAA,IAAA,iBAAoBH,EAApB,oBAAkCI,IAD1B,uBACvBK,EADuB,EACvBA,KADuB,kBAExBA,EAAKM,MAFmB,2CAAH,sDAKnBvB,EAAmB,mCAAG,WAAMQ,GAAN,yFACRG,EAAAA,EAAAA,IAAA,iBAAoBH,EAApB,oBAAkCI,IAD1B,uBACvBK,EADuB,EACvBA,KADuB,kBAExBA,EAAKC,SAFmB,2CAAH,qD","sources":["components/Error/Error.styled.jsx","components/Error/Error.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/fetchMovies.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ErrorImg = styled.img`\n  width: 500px;\n`;\n\nexport const ErrorMessage = styled.p`\n  font-size: 36px;\n  font-weight: 300;\n`;\n\nexport const ErrorContainer = styled.div`\n  text-align: center;\n`;\n","import { ErrorContainer, ErrorImg, ErrorMessage } from './Error.styled';\n\nconst Error = ({ message, img }) => {\n  return (\n    <ErrorContainer>\n      <ErrorImg src={img} alt=\"error\" />\n      <ErrorMessage>{message}</ErrorMessage>\n    </ErrorContainer>\n  );\n};\n\nexport default Error;\n","import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  background-color: white;\n  padding: 16px;\n  list-style: none;\n`;\n\nexport const ReviewItem = styled.li``;\n\nexport const Author = styled.h4`\n  margin: 0;\n`;\n\nexport const Content = styled.p``;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsByMovieId } from 'services/fetchMovies';\nimport { ReviewsList, ReviewItem, Author, Content } from './Reviews.styled';\nimport Error from 'components/Error/Error';\nimport sad from '../../img/sad.png';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getReviewsByMovieId(movieId).then(setReviews);\n  }, [movieId]);\n\n  console.log(reviews);\n\n  if (reviews.length > 0) {\n    return (\n      <ReviewsList>\n        {' '}\n        {reviews.map(({ author, content, id }) => {\n          return (\n            <ReviewItem key={id}>\n              <Author>{author}</Author>\n              <Content>{content}</Content>\n            </ReviewItem>\n          );\n        })}\n      </ReviewsList>\n    );\n  } else {\n    return <Error message=\"Sorry, but there are no reviews yet\" img={sad} />;\n  }\n};\n\nexport default Reviews;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3'\n\nconst searchParams = new URLSearchParams(\n    {\n        api_key: 'b026a5e55a93706d87a5f53b5d4e521f',\n        language: 'en-US'\n    }\n);\n\nexport const getTrandibgMovies = async () => {\n    const { data } = await axios.get(`/trending/movie/week?${searchParams}`);\n    return data.results;\n}\n\nexport const getMovieByQuery = async query => {\n    const { data } = await axios.get(`/search/movie?${searchParams}&query=${query}`);\n    return data.results;\n}\n\nexport const getMovieById = async id => {\n    const { data } = await axios.get(`/movie/${id}?${searchParams}`);\n    return data;\n}\n\nexport const getCreditsByMovieId = async id => {\n    const { data } = await axios.get(`/movie/${id}/credits?${searchParams}`);\n    return data.cast;\n}\n\nexport const getReviewsByMovieId = async id => {\n    const { data } = await axios.get(`/movie/${id}/reviews?${searchParams}`);\n    return data.results;\n}\n\n"],"names":["ErrorImg","styled","ErrorMessage","ErrorContainer","message","img","src","alt","ReviewsList","ReviewItem","Author","Content","useState","reviews","setReviews","movieId","useParams","useEffect","getReviewsByMovieId","then","console","log","length","map","author","content","id","Error","sad","axios","searchParams","URLSearchParams","api_key","language","getTrandibgMovies","data","results","getMovieByQuery","query","getMovieById","getCreditsByMovieId","cast"],"sourceRoot":""}