{"version":3,"file":"static/js/253.93baf1b1.chunk.js","mappings":"iQAEaA,EAAWC,EAAAA,EAAAA,GAAH,2KCARC,EAAWD,EAAAA,EAAAA,GAAH,sBAERE,EAAYF,EAAAA,EAAAA,IAAH,2DAKTG,EAAWH,EAAAA,EAAAA,EAAH,+EAMRI,EAAgBJ,EAAAA,EAAAA,EAAH,+E,SCgB1B,EAtBiB,SAAC,GAA6B,IAA3BK,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACxBC,EAAK,0CAAsCD,GACjD,OACE,UAACN,EAAD,YACE,SAACC,EAAD,CACEO,IAAKF,EAAUC,E,i5MACfE,IAAKJ,EACLK,MAAM,MACNC,OAAO,SAET,SAACT,EAAD,UAAWG,KACX,UAACF,EAAD,yBAA2BC,OAGhC,E,oBCaD,EA3Ba,WACX,OAAwBQ,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAKR,OAHAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBH,GAASI,KAAKL,EACnC,GAAE,CAACC,IACgB,IAAhBF,EAAKO,QAEL,SAACC,EAAA,QAAD,CAAOC,QAAQ,0CAA0CC,IAAKC,KAI9D,SAAC1B,EAAD,UACGe,EAAKY,KAAI,gBAAGC,EAAH,EAAGA,aAAcrB,EAAjB,EAAiBA,KAAMsB,EAAvB,EAAuBA,UAAWC,EAAlC,EAAkCA,GAAlC,OACR,SAAC,EAAD,CAEEtB,QAASoB,EACTrB,KAAMA,EACND,KAAMuB,GAHDC,EAFC,KAWjB,C,iGChCYC,EAAW9B,EAAAA,EAAAA,IAAH,yCAIR+B,EAAe/B,EAAAA,EAAAA,EAAH,iEAKZgC,EAAiBhC,EAAAA,EAAAA,IAAH,qE,SCM3B,EAdc,SAAC,GAAsB,IAApBuB,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,IACxB,OACE,UAACQ,EAAD,YACE,SAACF,EAAD,CAAUrB,IAAKe,EAAKd,IAAI,WACxB,SAACqB,EAAD,UAAeR,MAGpB,C,mMCRDU,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAe,IAAIC,gBACrB,CACIC,QAAS,mCACTC,SAAU,QACVC,eAAe,IAIVC,EAAiB,mCAAG,sGACNN,EAAAA,EAAAA,IAAA,+BAAkCC,IAD5B,uBACrBM,EADqB,EACrBA,KADqB,kBAEtBA,EAAKC,SAFiB,2CAAH,qDAKjBC,EAAe,mCAAG,WAAMC,GAAN,yFACJV,EAAAA,EAAAA,IAAA,wBAA2BC,EAA3B,kBAAiDS,IAD7C,uBACnBH,EADmB,EACnBA,KADmB,kBAEpBA,EAAKC,SAFe,2CAAH,sDAKfG,EAAY,mCAAG,WAAMf,GAAN,yFACDI,EAAAA,EAAAA,IAAA,iBAAoBJ,EAApB,YAA0BK,IADzB,uBAChBM,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAKZrB,EAAmB,mCAAG,WAAMU,GAAN,yFACRI,EAAAA,EAAAA,IAAA,iBAAoBJ,EAApB,oBAAkCK,IAD1B,uBACvBM,EADuB,EACvBA,KADuB,kBAExBA,EAAK1B,MAFmB,2CAAH,sDAKnB+B,EAAmB,mCAAG,WAAMhB,GAAN,yFACRI,EAAAA,EAAAA,IAAA,iBAAoBJ,EAApB,oBAAkCK,IAD1B,uBACvBM,EADuB,EACvBA,KADuB,kBAExBA,EAAKC,SAFmB,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/CastCard/CastCard.styled.jsx","components/CastCard/CastCard.jsx","components/Cast/Cast.jsx","components/Error/Error.styled.jsx","components/Error/Error.jsx","services/fetchMovies.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  background-color: white;\n  padding: 16px;\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 16px;\n`;\n","import styled from '@emotion/styled';\n\nexport const CastItem = styled.li``;\n\nexport const CastPhoto = styled.img`\n  width: 150px;\n  height: 250px;\n`;\n\nexport const CastName = styled.p`\n  font-size: 16px;\n  font-weight: 600;\n  margin: 0;\n`;\n\nexport const CastCharacter = styled.p`\n  max-width: 150px;\n  font-size: 15px;\n  margin: 0;\n`;\n","import {\n  CastItem,\n  CastPhoto,\n  CastName,\n  CastCharacter,\n} from './CastCard.styled';\nimport NullPhoto from '../../img/notfound.png';\nimport PropTypes from 'prop-types';\n\nconst CastCard = ({ role, name, profile }) => {\n  const photo = `https://image.tmdb.org/t/p/w500/${profile}`;\n  return (\n    <CastItem>\n      <CastPhoto\n        src={profile ? photo : NullPhoto}\n        alt={name}\n        width=\"250\"\n        height=\"380\"\n      />\n      <CastName>{name}</CastName>\n      <CastCharacter>Character: {role}</CastCharacter>\n    </CastItem>\n  );\n};\n\nCastCard.propTypes = {\n  role: PropTypes.string,\n  name: PropTypes.string,\n  profile: PropTypes.string,\n};\n\nexport default CastCard;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCreditsByMovieId } from 'services/fetchMovies';\nimport { CastList } from './Cast.styled';\nimport CastCard from 'components/CastCard/CastCard';\nimport Error from 'components/Error/Error';\nimport sad from '../../img/sad.png';\n// import NotFound from '../../img/notfound.png';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getCreditsByMovieId(movieId).then(setCast);\n  }, [movieId]);\n  if (cast.length === 0) {\n    return (\n      <Error message=\"Sorry, but we don't know about cast yet\" img={sad} />\n    );\n  } else {\n    return (\n      <CastList>\n        {cast.map(({ profile_path, name, character, id }) => (\n          <CastCard\n            key={id}\n            profile={profile_path}\n            name={name}\n            role={character}\n          />\n        ))}\n      </CastList>\n    );\n  }\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\n\nexport const ErrorImg = styled.img`\n  width: 500px;\n`;\n\nexport const ErrorMessage = styled.p`\n  font-size: 36px;\n  font-weight: 300;\n`;\n\nexport const ErrorContainer = styled.div`\n  text-align: center;\n  margin-top: -50px;\n`;\n","import { ErrorContainer, ErrorImg, ErrorMessage } from './Error.styled';\nimport PropTypes from 'prop-types';\n\nconst Error = ({ message, img }) => {\n  return (\n    <ErrorContainer>\n      <ErrorImg src={img} alt=\"error\" />\n      <ErrorMessage>{message}</ErrorMessage>\n    </ErrorContainer>\n  );\n};\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n  img: PropTypes.string,\n};\n\nexport default Error;\n","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3'\n\nconst searchParams = new URLSearchParams(\n    {\n        api_key: 'b026a5e55a93706d87a5f53b5d4e521f',\n        language: 'en-US',\n        include_adult: false,\n    }\n);\n\nexport const getTrandibgMovies = async () => {\n    const { data } = await axios.get(`/trending/movie/week?${searchParams}`);\n    return data.results;\n}\n\nexport const getMovieByQuery = async query => {\n    const { data } = await axios.get(`/search/movie?${searchParams}&query=${query}`);\n    return data.results;\n}\n\nexport const getMovieById = async id => {\n    const { data } = await axios.get(`/movie/${id}?${searchParams}`);\n    return data;\n}\n\nexport const getCreditsByMovieId = async id => {\n    const { data } = await axios.get(`/movie/${id}/credits?${searchParams}`);\n    return data.cast;\n}\n\nexport const getReviewsByMovieId = async id => {\n    const { data } = await axios.get(`/movie/${id}/reviews?${searchParams}`);\n    return data.results;\n}\n\n"],"names":["CastList","styled","CastItem","CastPhoto","CastName","CastCharacter","role","name","profile","photo","src","alt","width","height","useState","cast","setCast","movieId","useParams","useEffect","getCreditsByMovieId","then","length","Error","message","img","sad","map","profile_path","character","id","ErrorImg","ErrorMessage","ErrorContainer","axios","searchParams","URLSearchParams","api_key","language","include_adult","getTrandibgMovies","data","results","getMovieByQuery","query","getMovieById","getReviewsByMovieId"],"sourceRoot":""}