{"ast":null,"code":"var _jsxFileName = \"/Users/anna-mariia/goit-react-hw-05-movies/src/components/MovieCard/MovieCard.jsx\";\nimport { Container, Poster, Title, Score, OverviewTitle, Overview, Genre, GenresList, GenresTitle } from './MovieCard.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieCard = _ref => {\n  let {\n    movie\n  } = _ref;\n  const {\n    poster_path,\n    title,\n    release_date,\n    overview,\n    genres,\n    vote_average\n  } = movie;\n  const poster = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n  const year = release_date.slice(0, 4);\n  const scores = `${vote_average.toFixed(1)} / 10`;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Poster, {\n      src: poster,\n      alt: \"\",\n      width: \"280\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: [title, \" (\", year, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Score, {\n        children: [\"User score: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: scores\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OverviewTitle, {\n        children: \"Overview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Overview, {\n        children: overview\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GenresTitle, {\n        children: \"Genres\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GenresList, {\n        children: genres.map(_ref2 => {\n          let {\n            name,\n            id\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(Genre, {\n            children: name\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MovieCard;\nexport default MovieCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieCard\");","map":{"version":3,"sources":["/Users/anna-mariia/goit-react-hw-05-movies/src/components/MovieCard/MovieCard.jsx"],"names":["Container","Poster","Title","Score","OverviewTitle","Overview","Genre","GenresList","GenresTitle","MovieCard","movie","poster_path","title","release_date","overview","genres","vote_average","poster","year","slice","scores","toFixed","map","name","id"],"mappings":";AAAA,SACEA,SADF,EAEEC,MAFF,EAGEC,KAHF,EAIEC,KAJF,EAKEC,aALF,EAMEC,QANF,EAOEC,KAPF,EAQEC,UARF,EASEC,WATF,QAUO,oBAVP;;;AAYA,MAAMC,SAAS,GAAG,QAAe;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC/B,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,YAAtB;AAAoCC,IAAAA,QAApC;AAA8CC,IAAAA,MAA9C;AAAsDC,IAAAA;AAAtD,MACJN,KADF;AAEA,QAAMO,MAAM,GAAI,mCAAkCN,WAAY,EAA9D;AACA,QAAMO,IAAI,GAAGL,YAAY,CAACM,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,CAAb;AACA,QAAMC,MAAM,GAAI,GAAEJ,YAAY,CAACK,OAAb,CAAqB,CAArB,CAAwB,OAA1C;AACA,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,GAAG,EAAEJ,MAAb;AAAqB,MAAA,GAAG,EAAC,EAAzB;AAA4B,MAAA,KAAK,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BACE,QAAC,KAAD;AAAA,mBACGL,KADH,QACYM,IADZ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,KAAD;AAAA,gDACc;AAAA,oBAAOE;AAAP;AAAA;AAAA;AAAA;AAAA,gBADd;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE,QAAC,QAAD;AAAA,kBAAWN;AAAX;AAAA;AAAA;AAAA;AAAA,cARF,eASE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAUE,QAAC,UAAD;AAAA,kBACGC,MAAM,CAACO,GAAP,CAAW;AAAA,cAAC;AAAEC,YAAAA,IAAF;AAAQC,YAAAA;AAAR,WAAD;AAAA,8BACV,QAAC,KAAD;AAAA,sBAAiBD;AAAjB,aAAYC,EAAZ;AAAA;AAAA;AAAA;AAAA,kBADU;AAAA,SAAX;AADH;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA3BD;;KAAMf,S;AA6BN,eAAeA,SAAf","sourcesContent":["import {\n  Container,\n  Poster,\n  Title,\n  Score,\n  OverviewTitle,\n  Overview,\n  Genre,\n  GenresList,\n  GenresTitle,\n} from './MovieCard.styled';\n\nconst MovieCard = ({ movie }) => {\n  const { poster_path, title, release_date, overview, genres, vote_average } =\n    movie;\n  const poster = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n  const year = release_date.slice(0, 4);\n  const scores = `${vote_average.toFixed(1)} / 10`;\n  return (\n    <Container>\n      <Poster src={poster} alt=\"\" width=\"280\" />\n      <div>\n        <Title>\n          {title} ({year})\n        </Title>\n        <Score>\n          User score: <span>{scores}</span>\n        </Score>\n        <OverviewTitle>Overview</OverviewTitle>\n        <Overview>{overview}</Overview>\n        <GenresTitle>Genres</GenresTitle>\n        <GenresList>\n          {genres.map(({ name, id }) => (\n            <Genre key={id}>{name}</Genre>\n          ))}\n        </GenresList>\n      </div>\n    </Container>\n  );\n};\n\nexport default MovieCard;\n"]},"metadata":{},"sourceType":"module"}